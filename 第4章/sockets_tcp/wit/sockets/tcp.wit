package wasi:sockets@0.2.0;

interface tcp {
    use wasi:io/streams@0.2.0.{input-stream, output-stream};
    use wasi:io/poll@0.2.0.{pollable};
    use wasi:clocks/monotonic-clock@0.2.0.{duration};
    use network.{network, error-code, ip-socket-address, ip-address-family};

    enum shutdown-type {
        receive,
        send,
        both,
    }

    resource tcp-socket {
        start-bind: func(
            network: borrow<network>,
            local-address: ip-socket-address,
        ) -> result<_, error-code>;
        finish-bind: func() -> result<_, error-code>;

        start-connect: func(
            network: borrow<network>,
            remote-address: ip-socket-address,
        ) -> result<_, error-code>;
        finish-connect: func() -> result<
            tuple<input-stream, output-stream>,
            error-code
        >;

        start-listen: func() -> result<_, error-code>;
        finish-listen: func() -> result<_, error-code>;

        accept: func() -> result<
            tuple<tcp-socket, input-stream, output-stream>,
            error-code
        >;

        local-address: func() -> result<ip-socket-address, error-code>;

        remote-address: func() -> result<ip-socket-address, error-code>;

        is-listening: func() -> bool;

        address-family: func() -> ip-address-family;

        set-listen-backlog-size: func(value: u64) -> result<_, error-code>;

        keep-alive-enabled: func() -> result<bool, error-code>;
        set-keep-alive-enabled: func(value: bool) -> result<_, error-code>;

        keep-alive-idle-time: func() -> result<duration, error-code>;
        set-keep-alive-idle-time: func(value: duration) -> result<_, error-code>;

        keep-alive-interval: func() -> result<duration, error-code>;
        set-keep-alive-interval: func(value: duration) -> result<_, error-code>;

        keep-alive-count: func() -> result<u32, error-code>;
        set-keep-alive-count: func(value: u32) -> result<_, error-code>;

        hop-limit: func() -> result<u8, error-code>;
        set-hop-limit: func(value: u8) -> result<_, error-code>;

        receive-buffer-size: func() -> result<u64, error-code>;
        set-receive-buffer-size: func(value: u64) -> result<_, error-code>;
        send-buffer-size: func() -> result<u64, error-code>;
        set-send-buffer-size: func(value: u64) -> result<_, error-code>;

        subscribe: func() -> pollable;

        shutdown: func(shutdown-type: shutdown-type) -> result<_, error-code>;
    }
}
