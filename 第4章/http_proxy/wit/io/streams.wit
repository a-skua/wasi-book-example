package wasi:io@0.2.0;

interface streams {
    use error.{error};
    use poll.{pollable};

    variant stream-error {
        last-operation-failed(error),
        closed,
    }

    resource input-stream {
        read: func(len: u64) -> result<list<u8>, stream-error>;
        blocking-read: func(len: u64) -> result<list<u8>, stream-error>;
        skip: func(len: u64) -> result<u64, stream-error>;
        blocking-skip: func(len: u64) -> result<u64, stream-error>;
        subscribe: func() -> pollable;
    }

    resource output-stream {
        check-write: func() -> result<u64, stream-error>;
        write: func(contents: list<u8>) -> result<_, stream-error>;
        blocking-write-and-flush: func(
            contents: list<u8>,
        ) -> result<_, stream-error>;
        flush: func() -> result<_, stream-error>;
        blocking-flush: func() -> result<_, stream-error>;
        subscribe: func() -> pollable;
        write-zeroes: func(len: u64) -> result<_, stream-error>;
        blocking-write-zeroes-and-flush: func(
            len: u64,
        ) -> result<_, stream-error>;
        splice: func(
            src: borrow<input-stream>,
            len: u64,
        ) -> result<u64, stream-error>;
        blocking-splice: func(
            src: borrow<input-stream>,
            len: u64,
        ) -> result<u64, stream-error>;
    }
}
